import materia.*
import carrera.*
import estudiante.*
import baseDeDatos.*
import aprobado.*
import sistema.*
import requisito.*
import listaDeEspera.*

describe "Tests del sistema de inscripciones"{
    
    // Listas De Espera

    // Requisitos
    const creditos = new Credito (requisitos=250)
    const anio1Programacion = new Anio(requisitos = sistema.materiasDe_AnioDe_(1, programacion))
    const anio2Programacion = new Anio(requisitos = sistema.materiasDe_AnioDe_(2, programacion))
    const nada = new Nada(requisitos=[]) // Esto quedó raro?
    const correlativasObjetos2 = new Correlativa(requisitos=#{objetos1,matematica1})
    const correlativasObjetos3 = new Correlativa(requisitos=#{objetos2,BBDD})
    const correlativasConcurrente = new Correlativa(requisitos=#{objetos1,BBDD})
    const correlativasBiologia2 = new Correlativa(requisitos=#{biologia1})


     // Materias de Programacion y Carrera
    const elementosProgramacion = new Materia(creditos=50, anio=1, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const matematica1 = new Materia(creditos=50, anio=1, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const objetos1 = new Materia(creditos=50, anio=1, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const objetos2 = new Materia(_requisitos_= correlativasObjetos2, cupo=3, creditos=50, anio=2, enListaDeEspera = new PorOrdenDeLlegada())
    const BBDD = new Materia(creditos=50, anio=1, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const objetos3 = new Materia(_requisitos_= correlativasObjetos3,creditos=50, anio=2, enListaDeEspera = new PorOrdenDeLlegada())
    const concurrente = new Materia(_requisitos_= correlativasConcurrente,creditos=50, anio=2, enListaDeEspera = new PorOrdenDeLlegada())
    const tFinal = new Materia(creditos=0, anio=3, _requisitos_=creditos, enListaDeEspera = new PorOrdenDeLlegada())
    const programacion = new Carrera(materias= #{elementosProgramacion, matematica1, objetos1, objetos2, BBDD, objetos3, concurrente, tFinal})

     // Materias de Medicina y Carrera
    const biologia1 = new Materia(creditos=50, anio=1, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const biologia2 = new Materia(_requisitos_= correlativasBiologia2,creditos=50, anio=2, enListaDeEspera = new PorOrdenDeLlegada())
    const quimica = new Materia(creditos=50, anio=1,_requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const anatomiaGral = new Materia(creditos=50, anio=1, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const medicina = new Carrera(materias= #{biologia1, biologia2, quimica, anatomiaGral})

     // Materias de Derecho y Carrera
    const latin = new Materia(creditos=50, anio=1, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const dRomano = new Materia(creditos=50, anio=2, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const historiaDArgentino = new Materia(creditos=50, anio=2, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const dPenal1 = new Materia(creditos=50, anio=1, _requisitos_=nada, enListaDeEspera = new PorOrdenDeLlegada())
    const dPenal2 = new Materia(_requisitos_= nada ,creditos=50, anio=2, enListaDeEspera = new PorOrdenDeLlegada())
    const derecho = new Carrera(materias = #{latin, dRomano, historiaDArgentino, dPenal1, dPenal2})
    const anio1Derecho = new Anio(requisitos = sistema.materiasDe_AnioDe_(1, derecho))
    
    // Estudiantes y sus aprobadas
    const roque = new Estudiante(carreras= #{programacion, medicina})
    const aprobado1 = new Aprobado(materia=matematica1, estudiante=roque, nota=7)
    const aprobado2 = new Aprobado(materia=objetos1, estudiante=roque, nota=8)
    const aprobado13 = new Aprobado(materia=elementosProgramacion, estudiante=roque, nota=9)
    const aprobado14 = new Aprobado(materia=BBDD, estudiante=roque, nota=9)
    const aprobado15 = new Aprobado(materia=quimica, estudiante=roque, nota=9)
    const aprobado16 = new Aprobado(materia=biologia1, estudiante=roque, nota=9)

    const luisa = new Estudiante(carreras= #{programacion})
    const aprobado3 = new Aprobado(materia=matematica1, estudiante=luisa, nota=7)
    const aprobado4 = new Aprobado(materia=objetos1, estudiante=luisa, nota=8)
    const aprobado5 = new Aprobado(materia=elementosProgramacion, estudiante=luisa, nota=9)

    const romina = new Estudiante(carreras= #{programacion})
    const aprobado6 = new Aprobado(materia=matematica1, estudiante=romina, nota=7)
    const aprobado7 = new Aprobado(materia=objetos1, estudiante=romina, nota=8)
    const aprobado8 = new Aprobado(materia=elementosProgramacion, estudiante=romina, nota=9)

    const alicia = new Estudiante(carreras= #{programacion})
    const aprobado9 = new Aprobado(materia=matematica1, estudiante=alicia, nota=9)
    const aprobado10 = new Aprobado(materia=objetos1, estudiante=alicia, nota=9)
    const aprobado11 = new Aprobado(materia=elementosProgramacion, estudiante=alicia, nota=9)

    const ana = new Estudiante(carreras= #{programacion})
    const aprobado12 = new Aprobado(materia=elementosProgramacion, estudiante=ana, nota=7)

    method initialize(){
        dPenal2._requisitos_(anio1Derecho)
        baseDeDatos.registrarAprobado(aprobado1)
        baseDeDatos.registrarAprobado(aprobado2)
        baseDeDatos.registrarAprobado(aprobado3)
        baseDeDatos.registrarAprobado(aprobado4)
        baseDeDatos.registrarAprobado(aprobado5)
        baseDeDatos.registrarAprobado(aprobado6)
        baseDeDatos.registrarAprobado(aprobado7)
        baseDeDatos.registrarAprobado(aprobado8)
        baseDeDatos.registrarAprobado(aprobado9)
        baseDeDatos.registrarAprobado(aprobado10)
        baseDeDatos.registrarAprobado(aprobado11)
        baseDeDatos.registrarAprobado(aprobado12)
        baseDeDatos.registrarAprobado(aprobado13)
        baseDeDatos.registrarAprobado(aprobado14)
        baseDeDatos.registrarAprobado(aprobado15)
        baseDeDatos.registrarAprobado(aprobado16)
    }

    test "Roque puede inscribirse en objetos2 pero no en objetos3 ni en objetos1"{
        assert.doesNotThrowException({sistema.inscribirA_Al_(objetos2, roque)})
        assert.throwsException({sistema.inscribirA_Al_(objetos1, roque)})
        assert.throwsException({sistema.inscribirA_Al_(objetos3, roque)})
    }

    test "Roque puede inscribirse en elementosProgramacion, objetos2 y concurrente"{
        assert.doesNotThrowException({sistema.inscribirA_Al_(objetos2, roque)})
        assert.doesNotThrowException({sistema.inscribirA_Al_(concurrente, roque)})
        assert.doesNotThrowException({sistema.inscribirA_Al_(biologia2, roque)})
    }    

    test "Se inscriben luisa, romina, alicia y roque a objetos2"{
        sistema.inscribirA_Al_(objetos2, luisa)
        sistema.inscribirA_Al_(objetos2, romina)
        sistema.inscribirA_Al_(objetos2, alicia)
        sistema.inscribirA_Al_(objetos2, roque)
        assert.equals(3, objetos2.inscriptos().size())
        assert.equals(1, objetos2.enListaDeEspera().size())
        assert.equals(roque, objetos2.enListaDeEspera().primeroDeLaLista())
    }

    test "Se inscriben luisa, romina, alicia y roque a objetos2, romina se da de baja"{
        sistema.inscribirA_Al_(objetos2, luisa)
        sistema.inscribirA_Al_(objetos2, romina)
        sistema.inscribirA_Al_(objetos2, alicia)
        sistema.inscribirA_Al_(objetos2, roque)
        sistema.bajaDeInscripcionDe(objetos2, romina)
        assert.equals(3, objetos2.inscriptos().size())
        assert.equals(0, objetos2.enListaDeEspera().size())
    }


    // Tests agregados para Requisitos y las funciones que necesita
    test "Roque tiene 6 materias aprobadas, 4 son de Proramacion y 2 de Medicina"{
        assert.equals(6, sistema.listaDeAprobadasPor(roque).size())
        assert.equals(4, sistema.materiasAprobadasDe_(roque, programacion).size())
        assert.equals(2, sistema.materiasAprobadasDe_(roque, medicina).size())
    }

    test "Roque no puede anotarse con 200 creditos a tFinal pero si con 250"{
        assert.throwsException({sistema.inscribirA_Al_(tFinal, roque)})

        // Se hace aprobar una 5ta materia para llegar a 250 creditos.
        const aprobado17 = new Aprobado(materia=concurrente, estudiante=roque, nota=9)
        baseDeDatos.registrarAprobado(aprobado17)
        assert.doesNotThrowException({sistema.inscribirA_Al_(tFinal, roque)})
    }

    test "Requisito para anios de carpincho para anotarse a dPenal2"{
        // Nota dPenal2 tiene como requisito anio1 que representa todas las materias
        // de primer año de derecho (latin y dPenal1)
        
        // Sin materias aprobadas lanza error al intentar anotarse.
        const carpincho = new Estudiante(carreras= #{derecho})        
        assert.throwsException({sistema.inscribirA_Al_(dPenal2, carpincho)})

        // Con solo 1 materia de 1ro aprobada lanza error al intentar anotarse.
        const aprobado18 = new Aprobado(materia=latin, estudiante=carpincho, nota=7)
        baseDeDatos.registrarAprobado(aprobado18)
        assert.throwsException({sistema.inscribirA_Al_(dPenal2, carpincho)})

        // Con todas las materias de 1ro aprobadas NO LANZA ERROR.
        const aprobado19 = new Aprobado(materia=dPenal1, estudiante=carpincho, nota=8)
        baseDeDatos.registrarAprobado(aprobado19)
        assert.doesNotThrowException({sistema.inscribirA_Al_(dPenal2, carpincho)})
    }

    test "objetos2 tiene ordenDeLlegada y cupo 3, se anotan roque, luisa, romina, alicia, ana. Roque se baja"{
        // Para que ana pueda anotarse a objetos2
        const aprobado20 = new Aprobado(materia=objetos1, estudiante=ana, nota=9)
        const aprobado21 = new Aprobado(materia=matematica1, estudiante=ana, nota=7)
        baseDeDatos.registrarAprobado(aprobado20)
        baseDeDatos.registrarAprobado(aprobado21)

        sistema.inscribirA_Al_(objetos2, roque)
        sistema.inscribirA_Al_(objetos2, luisa)
        sistema.inscribirA_Al_(objetos2, romina)
        sistema.inscribirA_Al_(objetos2, alicia)
        sistema.inscribirA_Al_(objetos2, ana)

        assert.equals(3, objetos2.inscriptos().size())
        assert.equals(2, objetos2.enListaDeEspera().size())
        assert.equals(alicia, objetos2.enListaDeEspera().primeroDeLaLista())

        objetos2.bajarInscripcionDe(roque)
        assert.equals(3, objetos2.inscriptos().size())
        assert.equals(1, objetos2.enListaDeEspera().size())
        assert.equals(ana, objetos2.enListaDeEspera().primeroDeLaLista())

    }
        test "objetos2 tiene elitista y cupo 3, se anotan roque, luisa, romina, alicia, ana. Roque se baja"{
            // NOTA IMPORTANTE: el promedio de alicia es 9 y el de ana es 7.

        // Para que ana pueda anotarse a objetos2
        const aprobado20 = new Aprobado(materia=objetos1, estudiante=ana, nota=7)
        const aprobado21 = new Aprobado(materia=matematica1, estudiante=ana, nota=7)
        baseDeDatos.registrarAprobado(aprobado20)
        baseDeDatos.registrarAprobado(aprobado21)

        objetos2.enListaDeEspera(new Elitista())
        sistema.inscribirA_Al_(objetos2, roque)
        sistema.inscribirA_Al_(objetos2, luisa)
        sistema.inscribirA_Al_(objetos2, romina)
        sistema.inscribirA_Al_(objetos2, alicia)
        sistema.inscribirA_Al_(objetos2, ana)

        assert.equals(3, objetos2.inscriptos().size())  // 3 anotados
        assert.equals(2, objetos2.enListaDeEspera().size()) // 2 en lista de espera
        assert.equals(alicia, objetos2.enListaDeEspera().primeroDeLaLista())    // alicia es la primera

        objetos2.bajarInscripcionDe(roque)     // se baja roque

        assert.equals(3, objetos2.inscriptos().size())  // 3 anotados
        assert.equals(1, objetos2.enListaDeEspera().size()) // 1 en lista de espera
        assert.equals(ana, objetos2.enListaDeEspera().primeroDeLaLista())   // queda ana

    }

    test "objetos2 tiene PorAvance y cupo 3, se anotan luisa, romina, alicia, ana, roque. Luisa se baja"{
            // NOTA IMPORTANTE: roque tiene 4 materias aprobadas contra 3 materias aprobadas de ana.

        // Para que ana pueda anotarse a objetos2
        const aprobado20 = new Aprobado(materia=objetos1, estudiante=ana, nota=7)
        const aprobado21 = new Aprobado(materia=matematica1, estudiante=ana, nota=7)
        baseDeDatos.registrarAprobado(aprobado20)
        baseDeDatos.registrarAprobado(aprobado21)

        objetos2.enListaDeEspera(new PorAvance())
        sistema.inscribirA_Al_(objetos2, luisa)
        sistema.inscribirA_Al_(objetos2, romina)
        sistema.inscribirA_Al_(objetos2, alicia)
        sistema.inscribirA_Al_(objetos2, ana)
        sistema.inscribirA_Al_(objetos2, roque)

        assert.equals(3, objetos2.inscriptos().size())  // 3 anotados
        assert.equals(2, objetos2.enListaDeEspera().size()) // 2 en lista de espera
        assert.equals(roque, objetos2.enListaDeEspera().primeroDeLaLista())    // roque es el primero

        objetos2.bajarInscripcionDe(luisa)     // se baja luisa

        assert.equals(3, objetos2.inscriptos().size())  // 3 anotados
        assert.equals(1, objetos2.enListaDeEspera().size()) // 1 en lista de espera
        assert.equals(ana, objetos2.enListaDeEspera().primeroDeLaLista())   // queda ana

    }

}

// roque, luisa, romina, alicia, ana

